name: Visual Studio Extension for Emscripten

on:
  [ push, pull_request ]

jobs:
  build:
    strategy:
      matrix:
        config:
          - name: vs2022
            runs-on: windows-2022
            config-name: Release
            vsix-source: source.extension.vs2022.vsixmanifest
            msbuild-path: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\bin"

    if: ${{ !contains(github.event.head_commit.message, '[ci skip]') }}
    runs-on: ${{ matrix.config.runs-on }}

    env:
      Solution_Name: Emscripten.sln
      MSBuild_Path: ${{ matrix.config.msbuild-path }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Copy Vsix Source
        working-directory: Emscripten.Build.Definition
        run: |
          cp ${{ matrix.config.vsix-source }} source.extension.vsixmanifest

      - name: Setup Nuget
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.x'

      - name: Restore Nuget package
        run: nuget restore $env:Solution_Name
      
      - name: Build the application
        run: |
          Set-Item Env:Path "$env:MSBuild_Path;$env:Path"
          msbuild $env:Solution_Name /p:Configuration="${{ matrix.config.config-name }}"
      
      - name: Save Build.Definition Bundles
        uses: actions/upload-artifact@v2
        with:
          name: VSExt-Build.Definition.${{ matrix.config.name }}
          path: .\Emscripten.Build.Definition\bin\${{ matrix.config.config-name }}\*.vsix  

      - name: Save ExtensionPack Bundles
        uses: actions/upload-artifact@v2
        with:
          name: VSExt-Emscripten.ExtensionPack.${{ matrix.config.name }}
          path: .\Emscripten.ExtensionPack\bin\${{ matrix.config.config-name }}\*.vsix  

  test:
    needs: build
    runs-on: windows-2022

    env:
      MSBuild_path: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\bin"
      VSIXInstaller_Path: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE"
      DevEnv_Path: "C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\devenv.exe"
      WinAppDriver_Path: "C:\\Program Files (x86)\\Windows Application Driver\\WinAppDriver.exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Emscripten
        working-directory: Test
        run: |
          curl -L https://github.com/nokotan/EmscriptenInstaller/releases/download/v0.1.2/EmscriptenOffline.exe -o Emscripten.exe
          & ".\Emscripten.exe" /SILENT /SUPPRESSMSGBOXES
          Wait-Process -Name "Emscripten"
          $env:EMSDK = [System.Environment]::GetEnvironmentVariable("EMSDK","User")
          echo "EMSDK=$env:EMSDK" >> $env:GITHUB_ENV
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          echo $env:Path >> $Env:GITHUB_PATH

      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: VSExt-Build.Definition.vs2022
          path: Test

      - name: Install VSIX
        working-directory: Test
        run: |
          Set-Item Env:Path "$env:VSIXInstaller_Path;$env:Path"
          VSIXInstaller /quiet /admin Emscripten.Build.Definition.vsix
          Wait-Process -Name "VSIXInstaller"

      - name: Static Linking Test
        working-directory: Test/SampleProjects/StaticLinking
        run: |
          Set-Item Env:Path "$env:MSBuild_Path;$env:Path"
          msbuild StaticLinking.sln /p:Configuration="Release"

      - name: MultiProcessBuild Test
        working-directory: Test/SampleProjects/MultiProcessBuild
        run: |
          Set-Item Env:Path "$env:MSBuild_Path;$env:Path"
          msbuild MultiProcessBuild.sln /p:Configuration="Release"
 
  deploy:
    if: ${{ contains(github.ref, 'tags/v') }}
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: VSExt-Build.Definition.vs2022
          path: .

      - name: Restore Bundles
        uses: actions/download-artifact@v2
        with:
          name: VSExt-Emscripten.ExtensionPack.vs2022
          path: .

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

      - name: Upload Release Asset
        id: upload-build-support-package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Emscripten.Build.Definition.vsix
          asset_name: Emscripten.Build.Definition.vsix
          asset_content_type: application/vsix

      - name: Upload Release Asset
        id: upload-extension-pack-package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Emscripten.ExtensionPack.vsix
          asset_name: Emscripten.ExtensionPack.vsix
          asset_content_type: application/vsix

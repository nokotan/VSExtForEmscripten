/// <reference types="emscripten" />
import { type Chrome } from '../extension-api.js';
import { type HostInterface } from './WorkerRPC.js';
import { type WasmValue } from './WasmTypes.js';
export interface FieldInfo {
    typeId: string;
    name: string | undefined;
    offset: number;
}
export interface Enumerator {
    typeId: string;
    name: string;
    value: bigint;
}
export interface TypeInfo {
    typeId: string;
    enumerators?: Enumerator[];
    alignment: number;
    size: number;
    isPointer: boolean;
    members: FieldInfo[];
    arraySize: number;
    hasValue: boolean;
    typeNames: string[];
    canExpand: boolean;
}
export interface WasmInterface {
    readMemory(offset: number, length: number): Uint8Array;
    getOp(op: number): WasmValue;
    getLocal(local: number): WasmValue;
    getGlobal(global: number): WasmValue;
}
export interface Value {
    location: number;
    size: number;
    typeNames: string[];
    asUint8: () => number;
    asUint16: () => number;
    asUint32: () => number;
    asUint64: () => bigint;
    asInt8: () => number;
    asInt16: () => number;
    asInt32: () => number;
    asInt64: () => bigint;
    asFloat32: () => number;
    asFloat64: () => number;
    asDataView: (offset?: number, size?: number) => DataView;
    $: (member: string | number) => Value;
    getMembers(): string[];
}
export declare class MemorySlice {
    readonly begin: number;
    buffer: ArrayBuffer;
    constructor(buffer: ArrayBuffer, begin: number);
    merge(other: MemorySlice): MemorySlice;
    contains(offset: number): boolean;
    get length(): number;
    get end(): number;
    view(begin: number, length: number): DataView;
}
export declare class PageStore {
    readonly slices: MemorySlice[];
    findSliceIndex(offset: number): number;
    findSlice(offset: number): MemorySlice | null;
    private getSlice;
    addSlice(buffer: ArrayBuffer | number[], begin: number): MemorySlice;
}
export declare class WasmMemoryView {
    private readonly wasm;
    private readonly pages;
    private static readonly PAGE_SIZE;
    constructor(wasm: WasmInterface);
    private page;
    private getPages;
    getFloat32(byteOffset: number, littleEndian?: boolean): number;
    getFloat64(byteOffset: number, littleEndian?: boolean): number;
    getInt8(byteOffset: number): number;
    getInt16(byteOffset: number, littleEndian?: boolean): number;
    getInt32(byteOffset: number, littleEndian?: boolean): number;
    getUint8(byteOffset: number): number;
    getUint16(byteOffset: number, littleEndian?: boolean): number;
    getUint32(byteOffset: number, littleEndian?: boolean): number;
    getBigInt64(byteOffset: number, littleEndian?: boolean): bigint;
    getBigUint64(byteOffset: number, littleEndian?: boolean): bigint;
    asDataView(byteOffset: number, byteLength: number): DataView;
}
export declare class CXXValue implements Value, LazyObject {
    readonly location: number;
    private readonly type;
    private readonly data?;
    private readonly memoryOrDataView;
    private readonly wasm;
    private readonly typeMap;
    private readonly memoryView;
    private membersMap?;
    private readonly objectStore;
    private readonly objectId;
    private readonly displayValue;
    private readonly memoryAddress?;
    constructor(objectStore: LazyObjectStore, wasm: WasmInterface, memoryView: WasmMemoryView, location: number, type: TypeInfo, typeMap: Map<unknown, TypeInfo>, data?: number[], displayValue?: string, memoryAddress?: number);
    static create(objectStore: LazyObjectStore, wasm: WasmInterface, memoryView: WasmMemoryView, typeInfo: {
        typeInfos: TypeInfo[];
        root: TypeInfo;
        location?: number;
        data?: number[];
        displayValue?: string;
        memoryAddress?: number;
    }): CXXValue;
    private get members();
    private getArrayElement;
    getProperties(): Promise<{
        name: string;
        property: LazyObject;
    }[]>;
    asRemoteObject(): Promise<Chrome.DevTools.RemoteObject>;
    get typeNames(): string[];
    get size(): number;
    asInt8(): number;
    asInt16(): number;
    asInt32(): number;
    asInt64(): bigint;
    asUint8(): number;
    asUint16(): number;
    asUint32(): number;
    asUint64(): bigint;
    asFloat32(): number;
    asFloat64(): number;
    asDataView(offset?: number, size?: number): DataView;
    $(selector: string | number): CXXValue;
    getMembers(): string[];
}
export interface LazyObject {
    getProperties(): Promise<{
        name: string;
        property: LazyObject;
    }[]>;
    asRemoteObject(): Promise<Chrome.DevTools.RemoteObject>;
}
export declare function primitiveObject<T>(value: T, description?: string, linearMemoryAddress?: number, type?: TypeInfo): PrimitiveLazyObject<T> | null;
export declare class LazyObjectStore {
    private nextObjectId;
    private objects;
    store(lazyObject: LazyObject): string;
    get(objectId: string): LazyObject | undefined;
    release(objectId: string): void;
    clear(): void;
}
export declare class PrimitiveLazyObject<T> implements LazyObject {
    readonly type: Chrome.DevTools.RemoteObjectType;
    readonly value: T;
    readonly description: string;
    private readonly linearMemoryAddress?;
    private readonly linearMemorySize?;
    constructor(type: Chrome.DevTools.RemoteObjectType, value: T, description?: string, linearMemoryAddress?: number, linearMemorySize?: number);
    getProperties(): Promise<{
        name: string;
        property: LazyObject;
    }[]>;
    asRemoteObject(): Promise<Chrome.DevTools.RemoteObject>;
}
export declare class LocalLazyObject implements LazyObject {
    readonly value: Object;
    private readonly objectId;
    private readonly objectStore;
    private readonly type?;
    private readonly linearMemoryAddress?;
    constructor(value: object, objectStore: LazyObjectStore, type?: TypeInfo, linearMemoryAddress?: number);
    getProperties(): Promise<{
        name: string;
        property: LazyObject;
    }[]>;
    asRemoteObject(): Promise<Chrome.DevTools.RemoteObject>;
}
export type FormatterResult = number | string | boolean | bigint | undefined | CXXValue | object | (() => LazyObject);
export type FormatterCallback = (wasm: WasmInterface, value: Value) => FormatterResult;
export interface Formatter {
    types: Array<string> | ((t: TypeInfo) => boolean);
    imports?: Array<FormatterCallback>;
    format: FormatterCallback;
}
export declare class HostWasmInterface {
    private readonly hostInterface;
    private readonly stopId;
    readonly view: WasmMemoryView;
    constructor(hostInterface: HostInterface, stopId: unknown);
    readMemory(offset: number, length: number): Uint8Array;
    getOp(op: number): WasmValue;
    getLocal(local: number): WasmValue;
    getGlobal(global: number): WasmValue;
}
export declare class DebuggerProxy {
    wasm: HostWasmInterface;
    target: EmscriptenModule;
    constructor(wasm: HostWasmInterface, target: EmscriptenModule);
    readMemory(src: number, dst: number, length: number): number;
    getLocal(index: number): WasmValue;
    getGlobal(index: number): WasmValue;
    getOperand(index: number): WasmValue;
}
export declare class CustomFormatters {
    private static formatters;
    private static genericFormatters;
    static addFormatter(formatter: Formatter): void;
    static get(type: TypeInfo): Formatter | null;
}

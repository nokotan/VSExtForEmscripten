/**
 * A path substitution specifies a string prefix pattern to be
 * replaced with a new string. This is the pendant of the
 * `set substitute-path old new` feature that is found in GDB
 * and `settings set target.source-map old new` feature that
 * is found in LLDB.
 */
export type PathSubstitution = {
    readonly from: string;
    readonly to: string;
};
/**
 * List of {@type PathSubstitution}s.
 */
export type PathSubstitutions = ReadonlyArray<PathSubstitution>;
/**
 * Resolve a source path (as stored in DWARF debugging information) to an absolute URL.
 *
 * Note that we treat "." specially as a pattern, since LLDB normalizes paths before
 * returning them from the DWARF parser. Our logic replicates the logic found in the
 * LLDB frontend in `PathMappingList::RemapPath()` inside `Target/PathMappingList.cpp`
 * (http://cs/github/llvm/llvm-project/lldb/source/Target/PathMappingList.cpp?l=157-185).
 *
 * @param pathSubstitutions possible substitutions to apply to the {@param sourcePath}, applies the first match.
 * @param sourcePath the source path as found in the debugging information.
 * @param baseURL the URL of the WebAssembly module, which is used to resolve relative source paths.
 * @return an absolute `file:`-URI or a URL relative to the {@param baseURL}.
 */
export declare function resolveSourcePathToURL(pathSubstitutions: PathSubstitutions, sourcePath: string, baseURL: URL): URL;
/**
 * Configuration for locating source files for a given WebAssembly module.
 * If the name is `undefined`, the configuration is the default configuration,
 * which is chosen if there's no named configuration matching the basename of
 * the WebAssembly module file.
 * The name can be a wildcard pattern, and {@see globMatch} will be used to
 * match the name against the URL of the WebAssembly module file.
 */
export type ModuleConfiguration = {
    readonly name?: string;
    readonly pathSubstitutions: PathSubstitutions;
};
/**
 * List of {@type ModuleConfiguration}s. These lists are intended to have
 * a default configuration, whose name field is `undefined`, which is chosen
 * when no matching named configuration is found.
 */
export type ModuleConfigurations = ReadonlyArray<ModuleConfiguration>;
/**
 * Locate the configuration for a given `something.wasm` module file name.
 *
 * @param moduleConfigurations list of module configurations to scan.
 * @param moduleName the URL of the module to lookup.
 * @return the matching module configuration or the default fallback.
 */
export declare function findModuleConfiguration(moduleConfigurations: ModuleConfigurations, moduleURL: URL): ModuleConfiguration;
export declare const DEFAULT_MODULE_CONFIGURATIONS: ModuleConfigurations;

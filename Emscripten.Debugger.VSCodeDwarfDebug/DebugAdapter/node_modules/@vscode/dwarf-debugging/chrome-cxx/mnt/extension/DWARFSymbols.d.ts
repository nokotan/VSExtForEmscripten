/// <reference types="emscripten" />
import './Formatters.js';
import { type Chrome } from '../extension-api.js';
import * as Formatters from './CustomFormatters.js';
import { type ModuleConfigurations } from './ModuleConfiguration.js';
import type * as SymbolsBackend from './SymbolsBackend.js';
import { type HostInterface } from './WorkerRPC.js';
type ScopeInfo = {
    type: 'GLOBAL' | 'LOCAL' | 'PARAMETER';
    typeName: string;
    icon?: string;
};
export declare function createEmbindPool(): {
    flush(): void;
    manage<T extends SymbolsBackend.EmbindObject | undefined>(object: T): T;
    unmanage<T extends SymbolsBackend.EmbindObject>(object: T): boolean;
};
export type RawModule = Chrome.DevTools.RawModule & {
    dwp?: ArrayBuffer;
};
export interface ResourceLoader {
    loadSymbols(rawModuleId: string, rawModule: RawModule, url: URL, filesystem: typeof FS): Promise<{
        symbolsFileName: string;
        symbolsDwpFileName?: string;
    }>;
    createSymbolsBackendModulePromise(): Promise<WebAssembly.Module>;
    possiblyMissingSymbols?: string[];
}
export declare class DWARFLanguageExtensionPlugin implements Chrome.DevTools.LanguageExtensionPlugin {
    readonly moduleConfigurations: ModuleConfigurations;
    readonly resourceLoader: ResourceLoader;
    readonly hostInterface: HostInterface;
    private moduleInfos;
    private lazyObjects;
    constructor(moduleConfigurations: ModuleConfigurations, resourceLoader: ResourceLoader, hostInterface: HostInterface);
    private newModuleInfo;
    addRawModule(rawModuleId: string, symbolsUrl: string, rawModule: RawModule): Promise<string[]>;
    private getModuleInfo;
    removeRawModule(rawModuleId: string): Promise<void>;
    sourceLocationToRawLocation(sourceLocation: Chrome.DevTools.SourceLocation): Promise<Chrome.DevTools.RawLocationRange[]>;
    rawLocationToSourceLocation(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.SourceLocation[]>;
    getScopeInfo(type: string): Promise<ScopeInfo>;
    listVariablesInScope(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.Variable[]>;
    getFunctionInfo(rawLocation: Chrome.DevTools.RawLocation): Promise<{
        frames: Chrome.DevTools.FunctionInfo[];
        missingSymbolFiles: string[];
    }>;
    getInlinedFunctionRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]>;
    getInlinedCalleesRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]>;
    getValueInfo(expression: string, context: Chrome.DevTools.RawLocation, stopId: unknown): Promise<{
        typeInfos: Formatters.TypeInfo[];
        root: Formatters.TypeInfo;
        location?: number;
        data?: number[];
        displayValue?: string;
        memoryAddress?: number;
    } | null>;
    getMappedLines(rawModuleId: string, sourceFileURL: string): Promise<number[]>;
    evaluate(expression: string, context: SymbolsBackend.RawLocation, stopId: unknown): Promise<Chrome.DevTools.RemoteObject | null>;
    getProperties(objectId: Chrome.DevTools.RemoteObjectId): Promise<Chrome.DevTools.PropertyDescriptor[]>;
    releaseObject(objectId: Chrome.DevTools.RemoteObjectId): Promise<void>;
}
export declare function createPlugin(hostInterface: HostInterface, resourceLoader: ResourceLoader, moduleConfigurations?: ModuleConfigurations, logPluginApiCalls?: boolean): Promise<DWARFLanguageExtensionPlugin>;
export {};

import { type Chrome } from '../extension-api.js';
import { type ModuleConfigurations } from './ModuleConfiguration.js';
import { type WasmValue, type SerializedWasmType } from './WasmTypes.js';
export interface WorkerInterface extends Chrome.DevTools.LanguageExtensionPlugin {
    hello(moduleConfigurations: ModuleConfigurations, logPluginApiCalls: boolean): void;
}
export interface AsyncHostInterface {
    getWasmLinearMemory(offset: number, length: number, stopId: unknown): Promise<ArrayBuffer>;
    getWasmLocal(local: number, stopId: unknown): Promise<WasmValue>;
    getWasmGlobal(global: number, stopId: unknown): Promise<WasmValue>;
    getWasmOp(op: number, stopId: unknown): Promise<WasmValue>;
}
export interface HostInterface {
    getWasmLinearMemory(offset: number, length: number, stopId: unknown): ArrayBuffer;
    getWasmLocal(local: number, stopId: unknown): WasmValue;
    getWasmGlobal(global: number, stopId: unknown): WasmValue;
    getWasmOp(op: number, stopId: unknown): WasmValue;
}
type AllMessages<Interface extends Record<string, any>> = {
    [k in keyof Interface]: {
        method: k;
        params: Parameters<Interface[k]>;
    };
};
type Message<Interface extends Object> = {
    requestId: number;
} & ({
    request: AllMessages<Interface>[keyof AllMessages<Interface>];
} | {
    sync_request: {
        request: AllMessages<Interface>[keyof AllMessages<Interface>];
        io_buffer: {
            semaphore: SharedArrayBuffer;
            data: SharedArrayBuffer;
        };
    };
});
export interface Channel<LocalInterface extends Object, RemoteInterface extends Object> {
    postMessage(message: any): any;
    onmessage: ((e: MessageEvent<Message<LocalInterface> | Response<RemoteInterface>>) => any) | null;
}
type AllResponses<Interface extends Record<string, any>> = {
    [k in keyof Interface]: ReturnType<Interface[k]>;
};
type Response<Interface extends Object> = {
    requestId: number;
} & ({
    error: string;
} | {
    response: AllResponses<Interface>[keyof AllResponses<Interface>];
});
export declare abstract class SynchronousIOMessage<T> {
    readonly buffer: SharedArrayBuffer;
    constructor(bufferSize: number);
    abstract deserialize(response: number): T;
    static serialize(value: ArrayBuffer | WasmValue, buffer: SharedArrayBuffer): SerializedWasmType;
}
export declare class WorkerRPC<LocalInterface extends Record<string, any>, RemoteInterface extends Record<string, any>> {
    private nextRequestId;
    private readonly channel;
    private readonly localHandler;
    private readonly requests;
    private readonly semaphore;
    constructor(channel: Channel<LocalInterface, RemoteInterface>, localHandler: LocalInterface);
    sendMessage<Method extends keyof RemoteInterface>(method: Method, ...params: Parameters<RemoteInterface[Method]>): ReturnType<RemoteInterface[Method]>;
    sendMessageSync<Method extends keyof RemoteInterface>(message: SynchronousIOMessage<ReturnType<RemoteInterface[Method]>>, method: Method, ...params: Parameters<RemoteInterface[Method]>): ReturnType<RemoteInterface[Method]>;
    private onmessage;
}
export {};

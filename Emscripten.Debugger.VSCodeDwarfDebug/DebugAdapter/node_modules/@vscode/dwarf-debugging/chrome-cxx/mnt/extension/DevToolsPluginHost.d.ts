import { type ModuleConfigurations } from './ModuleConfiguration.js';
import { type Chrome } from '../extension-api.js';
import { type AsyncHostInterface } from './WorkerRPC.js';
import { type WasmValue } from './WasmTypes.js';
export declare class WorkerPlugin implements Chrome.DevTools.LanguageExtensionPlugin, AsyncHostInterface {
    private readonly worker;
    private readonly rpc;
    constructor();
    getWasmLinearMemory(offset: number, length: number, stopId: unknown): Promise<ArrayBuffer>;
    getWasmLocal(local: number, stopId: unknown): Promise<WasmValue>;
    getWasmGlobal(global: number, stopId: unknown): Promise<WasmValue>;
    getWasmOp(op: number, stopId: unknown): Promise<WasmValue>;
    static create(moduleConfigurations?: ModuleConfigurations, logPluginApiCalls?: boolean): Promise<WorkerPlugin>;
    addRawModule(rawModuleId: string, symbolsURL: string, rawModule: Chrome.DevTools.RawModule): Promise<string[] | {
        missingSymbolFiles: string[];
    }>;
    removeRawModule(rawModuleId: string): Promise<void>;
    sourceLocationToRawLocation(sourceLocation: Chrome.DevTools.SourceLocation): Promise<Chrome.DevTools.RawLocationRange[]>;
    rawLocationToSourceLocation(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.SourceLocation[]>;
    getScopeInfo(type: string): Promise<Chrome.DevTools.ScopeInfo>;
    listVariablesInScope(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.Variable[]>;
    getFunctionInfo(rawLocation: Chrome.DevTools.RawLocation): Promise<{
        frames: Chrome.DevTools.FunctionInfo[];
    } | {
        missingSymbolFiles: string[];
    }>;
    getInlinedFunctionRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]>;
    getInlinedCalleesRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]>;
    getMappedLines(rawModuleId: string, sourceFileURL: string): Promise<number[] | undefined>;
    evaluate(expression: string, context: Chrome.DevTools.RawLocation, stopId: unknown): Promise<Chrome.DevTools.RemoteObject | null>;
    getProperties(objectId: Chrome.DevTools.RemoteObjectId): Promise<Chrome.DevTools.PropertyDescriptor[]>;
    releaseObject(objectId: Chrome.DevTools.RemoteObjectId): Promise<void>;
}
export interface Storage {
    onChanged: Chrome.DevTools.EventSink<(changes: {
        [key: string]: {
            oldValue: unknown;
            newValue: unknown;
        };
    }, namespace: string) => unknown>;
    local: {
        set<ResultT>(value: ResultT): void;
        get<ResultT>(keys: ResultT, callback: (result: ResultT) => unknown): void;
    };
}
export declare const chrome: Chrome.DevTools.Chrome & {
    storage?: Storage;
};

import { type Chrome } from '../extension-api.js';
import { type ResourceLoader } from './DWARFSymbols.js';
import { type ModuleConfigurations } from './ModuleConfiguration.js';
import { type WasmValue } from './WasmTypes.js';
import { type Channel, type HostInterface, type WorkerInterface } from './WorkerRPC.js';
export declare class RPCInterface implements WorkerInterface, HostInterface {
    #private;
    private readonly rpc;
    private readonly resourceLoader;
    get plugin(): Chrome.DevTools.LanguageExtensionPlugin;
    constructor(port: Channel<WorkerInterface, HostInterface>, resourceLoader: ResourceLoader);
    getWasmLinearMemory(offset: number, length: number, stopId: unknown): ArrayBuffer;
    getWasmLocal(local: number, stopId: unknown): WasmValue;
    getWasmGlobal(global: number, stopId: unknown): WasmValue;
    getWasmOp(op: number, stopId: unknown): WasmValue;
    evaluate(expression: string, context: Chrome.DevTools.RawLocation, stopId: unknown): Promise<Chrome.DevTools.RemoteObject | null>;
    getProperties(objectId: string): Promise<Chrome.DevTools.PropertyDescriptor[]>;
    releaseObject(objectId: string): Promise<void>;
    addRawModule(rawModuleId: string, symbolsURL: string | undefined, rawModule: Chrome.DevTools.RawModule): Promise<string[] | {
        missingSymbolFiles: string[];
    }>;
    sourceLocationToRawLocation(sourceLocation: Chrome.DevTools.SourceLocation): Promise<Chrome.DevTools.RawLocationRange[]>;
    rawLocationToSourceLocation(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.SourceLocation[]>;
    getScopeInfo(type: string): Promise<Chrome.DevTools.ScopeInfo>;
    listVariablesInScope(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.Variable[]>;
    removeRawModule(rawModuleId: string): Promise<void>;
    getFunctionInfo(rawLocation: Chrome.DevTools.RawLocation): Promise<{
        frames: Chrome.DevTools.FunctionInfo[];
    } | {
        missingSymbolFiles: string[];
    }>;
    getInlinedFunctionRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]>;
    getInlinedCalleesRanges(rawLocation: Chrome.DevTools.RawLocation): Promise<Chrome.DevTools.RawLocationRange[]>;
    getMappedLines(rawModuleId: string, sourceFileURL: string): Promise<number[] | undefined>;
    hello(moduleConfigurations: ModuleConfigurations, logPluginApiCalls: boolean): Promise<void>;
}

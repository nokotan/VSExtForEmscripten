export type WasmValue = {
    type: 'i32' | 'f32' | 'f64';
    value: number;
} | {
    type: 'i64';
    value: bigint;
} | {
    type: 'v128';
    value: string;
};
export type WasmSimdValue = string;
export type WasmPrimitive = number | bigint | WasmSimdValue;
export declare const enum SerializedWasmType {
    i32 = 1,
    i64 = 2,
    f32 = 3,
    f64 = 4,
    v128 = 5
}
export declare function serializeWasmValue(value: WasmValue | ArrayBuffer, buffer: ArrayBufferLike): SerializedWasmType;
export declare function deserializeWasmMemory(buffer: ArrayBufferLike): ArrayBuffer;
export declare function deserializeWasmValue(buffer: ArrayBufferLike, type: SerializedWasmType): WasmValue;
export declare const kMaxWasmValueSize: number;
export type WasmFunction = (...args: WasmPrimitive[]) => WasmPrimitive;
export type WasmExport = {
    name: string;
} & ({
    func: number;
} | {
    table: number;
} | {
    mem: number;
} | {
    global: number;
});
export type WasmImport = {
    name: string;
    module: string;
} & ({
    func: number;
} | {
    table: number;
} | {
    mem: number;
} | {
    global: number;
});

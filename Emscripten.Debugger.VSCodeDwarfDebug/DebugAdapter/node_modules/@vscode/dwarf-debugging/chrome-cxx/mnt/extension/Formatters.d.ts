import { type Value, type WasmInterface, type LazyObject } from './CustomFormatters.js';
export declare const enum Constants {
    MAX_STRING_LEN = 268435440,
    PAGE_SIZE = 4096,
    SAFE_HEAP_START = 1024
}
export declare function formatVoid(): () => LazyObject;
export declare function formatChar(wasm: WasmInterface, value: Value): string;
export declare function formatLibCXX8String(wasm: WasmInterface, value: Value): {
    size: number;
    string: string;
};
export declare function formatLibCXX16String(wasm: WasmInterface, value: Value): {
    size: number;
    string: string;
};
export declare function formatLibCXX32String(wasm: WasmInterface, value: Value): {
    size: number;
    string: string;
};
export declare function formatCString(wasm: WasmInterface, value: Value): string | {
    [key: string]: Value | null;
};
export declare function formatU16CString(wasm: WasmInterface, value: Value): string | {
    [key: string]: Value | null;
};
export declare function formatCWString(wasm: WasmInterface, value: Value): string | {
    [key: string]: Value | null;
};
export declare function formatVector(wasm: WasmInterface, value: Value): Value[];
export declare function formatPointerOrReference(wasm: WasmInterface, value: Value): {
    [key: string]: Value | null;
};
export declare function formatDynamicArray(wasm: WasmInterface, value: Value): {
    [key: string]: Value | null;
};
export declare function formatUInt128(wasm: WasmInterface, value: Value): bigint;
export declare function formatInt128(wasm: WasmInterface, value: Value): bigint;
